/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const ConversionStatus = {
    Finished: 'finished',
    InProgress: 'inProgress',
    Failed: 'failed',
    Canceled: 'canceled',
    Canceling: 'canceling'
} as const;

export type ConversionStatus = typeof ConversionStatus[keyof typeof ConversionStatus];


/**
 * 
 * @export
 * @interface ConversionTask
 */
export interface ConversionTask {
    /**
     * 
     * @type {string}
     * @memberof ConversionTask
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ConversionTask
     */
    'space_id': string;
    /**
     * 
     * @type {string}
     * @memberof ConversionTask
     */
    'space_key': string;
    /**
     * 
     * @type {ConversionStatus}
     * @memberof ConversionTask
     */
    'status': ConversionStatus;
    /**
     * 
     * @type {number}
     * @memberof ConversionTask
     */
    'progress': number;
    /**
     * 
     * @type {string}
     * @memberof ConversionTask
     */
    'start_time'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConversionTask
     */
    'end_time': string | null;
    /**
     * 
     * @type {string}
     * @memberof ConversionTask
     */
    'conversion_job_id': string | null;
    /**
     * 
     * @type {string}
     * @memberof ConversionTask
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ConversionTask
     */
    'updated_at': string;
    /**
     * 
     * @type {ConversionTaskMeta}
     * @memberof ConversionTask
     */
    'meta'?: ConversionTaskMeta;
}


/**
 * 
 * @export
 * @interface ConversionTaskMeta
 */
export interface ConversionTaskMeta {
    /**
     * 
     * @type {string}
     * @memberof ConversionTaskMeta
     */
    'dest_resource_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConversionTaskMeta
     */
    'dest_version_id'?: string | null;
}
/**
 * 
 * @export
 * @interface ConvertAnonymRequest
 */
export interface ConvertAnonymRequest {
    /**
     * Active Storage signeID
     * @type {string}
     * @memberof ConvertAnonymRequest
     */
    'input_file': string;
}
/**
 * 
 * @export
 * @interface ConvertCreateResource200Response
 */
export interface ConvertCreateResource200Response {
    /**
     * 
     * @type {Resource}
     * @memberof ConvertCreateResource200Response
     */
    'resource': Resource;
    /**
     * 
     * @type {ConversionTask}
     * @memberof ConvertCreateResource200Response
     */
    'task': ConversionTask;
}
/**
 * 
 * @export
 * @interface ConvertUpdateResource200Response
 */
export interface ConvertUpdateResource200Response {
    /**
     * 
     * @type {Version}
     * @memberof ConvertUpdateResource200Response
     */
    'version': Version;
    /**
     * 
     * @type {ConversionTask}
     * @memberof ConvertUpdateResource200Response
     */
    'task': ConversionTask;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'space_id': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'space_key': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'current_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface ResourceAuthPasswordRequest
 */
export interface ResourceAuthPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResourceAuthPasswordRequest
     */
    'link_password'?: string;
}
/**
 * 
 * @export
 * @interface SetResourceCurrentRequest
 */
export interface SetResourceCurrentRequest {
    /**
     * New Resource current id, if on one of resource versions
     * @type {string}
     * @memberof SetResourceCurrentRequest
     */
    'current_id': string;
}
/**
 * 
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
    /**
     * User\'s email
     * @type {string}
     * @memberof SignInRequest
     */
    'email': string;
    /**
     * User\'s password
     * @type {string}
     * @memberof SignInRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SignUpRequest
 */
export interface SignUpRequest {
    /**
     * User\'s email
     * @type {string}
     * @memberof SignUpRequest
     */
    'email': string;
    /**
     * User\'s password
     * @type {string}
     * @memberof SignUpRequest
     */
    'password': string;
    /**
     * password confirmation, should match password
     * @type {string}
     * @memberof SignUpRequest
     */
    'password_confirmation': string;
}
/**
 * 
 * @export
 * @interface UpdateShareOptionsRequest
 */
export interface UpdateShareOptionsRequest {
    /**
     * Resource view access by link, possible values :none, :view
     * @type {string}
     * @memberof UpdateShareOptionsRequest
     */
    'link_access'?: UpdateShareOptionsRequestLinkAccessEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateShareOptionsRequest
     */
    'link_password'?: string;
}

export const UpdateShareOptionsRequestLinkAccessEnum = {
    None: 'none',
    View: 'view'
} as const;

export type UpdateShareOptionsRequestLinkAccessEnum = typeof UpdateShareOptionsRequestLinkAccessEnum[keyof typeof UpdateShareOptionsRequestLinkAccessEnum];

/**
 * 
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    'space_id': string;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    'space_key': string;
    /**
     * 
     * @type {VersionStatus}
     * @memberof Version
     */
    'status': VersionStatus;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    'resource_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof Version
     */
    'is_version': boolean;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    'updated_at': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const VersionStatus = {
    Pending: 'pending',
    InProgress: 'in_progress',
    Ready: 'ready',
    Failed: 'failed',
    Canceled: 'canceled'
} as const;

export type VersionStatus = typeof VersionStatus[keyof typeof VersionStatus];



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start anonym conversion
         * @summary convert_anonym op
         * @param {ConvertAnonymRequest} [convertAnonymRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertAnonym: async (convertAnonymRequest?: ConvertAnonymRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/op/convert-anonym`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(convertAnonymRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new Resource through conversion, Resource.current version is not ready
         * @summary convert_create resource
         * @param {ConvertAnonymRequest} convertAnonymRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateResource: async (convertAnonymRequest: ConvertAnonymRequest, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'convertAnonymRequest' is not null or undefined
            assertParamExists('convertCreateResource', 'convertAnonymRequest', convertAnonymRequest)
            const localVarPath = `/api/v1/resources/convert_create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(convertAnonymRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new Version through conversion, Resource.current version is not changed
         * @summary convert_update resource
         * @param {string} id Resource id
         * @param {ConvertAnonymRequest} convertAnonymRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertUpdateResource: async (id: string, convertAnonymRequest: ConvertAnonymRequest, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('convertUpdateResource', 'id', id)
            // verify required parameter 'convertAnonymRequest' is not null or undefined
            assertParamExists('convertUpdateResource', 'convertAnonymRequest', convertAnonymRequest)
            const localVarPath = `/api/v1/resources/{id}/convert_update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(convertAnonymRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete resource
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource: async (id: string, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteResource', 'id', id)
            const localVarPath = `/api/v1/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get description of Conversion Task
         * @summary show conversion
         * @param {string} id id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversion: async (id: string, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getConversion', 'id', id)
            const localVarPath = `/api/v1/conversions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get logs of Conversion Task (redirect to logs file)
         * @summary logs conversion
         * @param {string} id Conversion Task id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversionLogs: async (id: string, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getConversionLogs', 'id', id)
            const localVarPath = `/api/v1/conversions/{id}/logs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List conversion tasks for user
         * @summary List conversions
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversions: async (spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/conversions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary show resource
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource: async (id: string, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getResource', 'id', id)
            const localVarPath = `/api/v1/resources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resource asset items, not only versions
         * @summary get versions
         * @param {string} id Version id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceAssetItems: async (id: string, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getResourceAssetItems', 'id', id)
            const localVarPath = `/api/v1/resources/{id}/asset-items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resource versions, asset items each of which is versioned representation of resource
         * @summary get versions
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceVersions: async (id: string, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getResourceVersions', 'id', id)
            const localVarPath = `/api/v1/resources/{id}/versions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list resources
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources: async (spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/resources/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary show resource\'s share_options
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShareOptions: async (id: string, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getShareOptions', 'id', id)
            const localVarPath = `/api/v1/resources/{id}/share-options`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary show version
         * @param {string} id Version id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion: async (id: string, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVersion', 'id', id)
            const localVarPath = `/api/v1/versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary files version
         * @param {string} id Version id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionFiles: async (id: string, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVersionFiles', 'id', id)
            const localVarPath = `/api/v1/versions/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary enter password for resource share_option
         * @param {string} id Resource id
         * @param {ResourceAuthPasswordRequest} resourceAuthPasswordRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourceAuthPassword: async (id: string, resourceAuthPasswordRequest: ResourceAuthPasswordRequest, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resourceAuthPassword', 'id', id)
            // verify required parameter 'resourceAuthPasswordRequest' is not null or undefined
            assertParamExists('resourceAuthPassword', 'resourceAuthPasswordRequest', resourceAuthPasswordRequest)
            const localVarPath = `/api/v1/resources/{id}/share-options/auth-password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceAuthPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change current resource version
         * @summary set_current resource
         * @param {string} id Resource id
         * @param {SetResourceCurrentRequest} setResourceCurrentRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setResourceCurrent: async (id: string, setResourceCurrentRequest: SetResourceCurrentRequest, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setResourceCurrent', 'id', id)
            // verify required parameter 'setResourceCurrentRequest' is not null or undefined
            assertParamExists('setResourceCurrent', 'setResourceCurrentRequest', setResourceCurrentRequest)
            const localVarPath = `/api/v1/resources/{id}/set_current`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setResourceCurrentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign in user
         * @summary create session
         * @param {SignInRequest} [signInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn: async (signInRequest?: SignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/sign_in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign up new user
         * @summary create registration
         * @param {SignUpRequest} [signUpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (signUpRequest?: SignUpRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update resource\'s share_options
         * @param {string} id Resource id
         * @param {UpdateShareOptionsRequest} updateShareOptionsRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShareOptions: async (id: string, updateShareOptionsRequest: UpdateShareOptionsRequest, spaceKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateShareOptions', 'id', id)
            // verify required parameter 'updateShareOptionsRequest' is not null or undefined
            assertParamExists('updateShareOptions', 'updateShareOptionsRequest', updateShareOptionsRequest)
            const localVarPath = `/api/v1/resources/{id}/share-options`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spaceKey != null) {
                localVarHeaderParameter['space-key'] = String(spaceKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateShareOptionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Start anonym conversion
         * @summary convert_anonym op
         * @param {ConvertAnonymRequest} [convertAnonymRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertAnonym(convertAnonymRequest?: ConvertAnonymRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversionTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertAnonym(convertAnonymRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new Resource through conversion, Resource.current version is not ready
         * @summary convert_create resource
         * @param {ConvertAnonymRequest} convertAnonymRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertCreateResource(convertAnonymRequest: ConvertAnonymRequest, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertCreateResource200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertCreateResource(convertAnonymRequest, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new Version through conversion, Resource.current version is not changed
         * @summary convert_update resource
         * @param {string} id Resource id
         * @param {ConvertAnonymRequest} convertAnonymRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertUpdateResource(id: string, convertAnonymRequest: ConvertAnonymRequest, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConvertUpdateResource200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertUpdateResource(id, convertAnonymRequest, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete resource
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResource(id: string, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResource(id, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get description of Conversion Task
         * @summary show conversion
         * @param {string} id id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversion(id: string, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversionTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversion(id, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get logs of Conversion Task (redirect to logs file)
         * @summary logs conversion
         * @param {string} id Conversion Task id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversionLogs(id: string, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversionLogs(id, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List conversion tasks for user
         * @summary List conversions
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversions(spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversionTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversions(spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary show resource
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResource(id: string, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResource(id, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resource asset items, not only versions
         * @summary get versions
         * @param {string} id Version id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceAssetItems(id: string, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Version>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceAssetItems(id, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resource versions, asset items each of which is versioned representation of resource
         * @summary get versions
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceVersions(id: string, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Version>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceVersions(id, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary list resources
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResources(spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Resource>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResources(spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary show resource\'s share_options
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShareOptions(id: string, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShareOptions(id, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary show version
         * @param {string} id Version id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersion(id: string, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVersion(id, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary files version
         * @param {string} id Version id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersionFiles(id: string, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVersionFiles(id, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary enter password for resource share_option
         * @param {string} id Resource id
         * @param {ResourceAuthPasswordRequest} resourceAuthPasswordRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourceAuthPassword(id: string, resourceAuthPasswordRequest: ResourceAuthPasswordRequest, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourceAuthPassword(id, resourceAuthPasswordRequest, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change current resource version
         * @summary set_current resource
         * @param {string} id Resource id
         * @param {SetResourceCurrentRequest} setResourceCurrentRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setResourceCurrent(id: string, setResourceCurrentRequest: SetResourceCurrentRequest, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setResourceCurrent(id, setResourceCurrentRequest, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sign in user
         * @summary create session
         * @param {SignInRequest} [signInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIn(signInRequest?: SignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(signInRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sign up new user
         * @summary create registration
         * @param {SignUpRequest} [signUpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(signUpRequest?: SignUpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(signUpRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update resource\'s share_options
         * @param {string} id Resource id
         * @param {UpdateShareOptionsRequest} updateShareOptionsRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShareOptions(id: string, updateShareOptionsRequest: UpdateShareOptionsRequest, spaceKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShareOptions(id, updateShareOptionsRequest, spaceKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Start anonym conversion
         * @summary convert_anonym op
         * @param {ConvertAnonymRequest} [convertAnonymRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertAnonym(convertAnonymRequest?: ConvertAnonymRequest, options?: any): AxiosPromise<ConversionTask> {
            return localVarFp.convertAnonym(convertAnonymRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new Resource through conversion, Resource.current version is not ready
         * @summary convert_create resource
         * @param {ConvertAnonymRequest} convertAnonymRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertCreateResource(convertAnonymRequest: ConvertAnonymRequest, spaceKey?: string, options?: any): AxiosPromise<ConvertCreateResource200Response> {
            return localVarFp.convertCreateResource(convertAnonymRequest, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new Version through conversion, Resource.current version is not changed
         * @summary convert_update resource
         * @param {string} id Resource id
         * @param {ConvertAnonymRequest} convertAnonymRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertUpdateResource(id: string, convertAnonymRequest: ConvertAnonymRequest, spaceKey?: string, options?: any): AxiosPromise<ConvertUpdateResource200Response> {
            return localVarFp.convertUpdateResource(id, convertAnonymRequest, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete resource
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(id: string, spaceKey?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteResource(id, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get description of Conversion Task
         * @summary show conversion
         * @param {string} id id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversion(id: string, spaceKey?: string, options?: any): AxiosPromise<ConversionTask> {
            return localVarFp.getConversion(id, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get logs of Conversion Task (redirect to logs file)
         * @summary logs conversion
         * @param {string} id Conversion Task id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversionLogs(id: string, spaceKey?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getConversionLogs(id, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * List conversion tasks for user
         * @summary List conversions
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversions(spaceKey?: string, options?: any): AxiosPromise<Array<ConversionTask>> {
            return localVarFp.getConversions(spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary show resource
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(id: string, spaceKey?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getResource(id, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Resource asset items, not only versions
         * @summary get versions
         * @param {string} id Version id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceAssetItems(id: string, spaceKey?: string, options?: any): AxiosPromise<Array<Version>> {
            return localVarFp.getResourceAssetItems(id, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Resource versions, asset items each of which is versioned representation of resource
         * @summary get versions
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceVersions(id: string, spaceKey?: string, options?: any): AxiosPromise<Array<Version>> {
            return localVarFp.getResourceVersions(id, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list resources
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResources(spaceKey?: string, options?: any): AxiosPromise<Array<Resource>> {
            return localVarFp.getResources(spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary show resource\'s share_options
         * @param {string} id Resource id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShareOptions(id: string, spaceKey?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getShareOptions(id, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary show version
         * @param {string} id Version id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(id: string, spaceKey?: string, options?: any): AxiosPromise<Version> {
            return localVarFp.getVersion(id, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary files version
         * @param {string} id Version id
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionFiles(id: string, spaceKey?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getVersionFiles(id, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary enter password for resource share_option
         * @param {string} id Resource id
         * @param {ResourceAuthPasswordRequest} resourceAuthPasswordRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourceAuthPassword(id: string, resourceAuthPasswordRequest: ResourceAuthPasswordRequest, spaceKey?: string, options?: any): AxiosPromise<void> {
            return localVarFp.resourceAuthPassword(id, resourceAuthPasswordRequest, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Change current resource version
         * @summary set_current resource
         * @param {string} id Resource id
         * @param {SetResourceCurrentRequest} setResourceCurrentRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setResourceCurrent(id: string, setResourceCurrentRequest: SetResourceCurrentRequest, spaceKey?: string, options?: any): AxiosPromise<Resource> {
            return localVarFp.setResourceCurrent(id, setResourceCurrentRequest, spaceKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Sign in user
         * @summary create session
         * @param {SignInRequest} [signInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn(signInRequest?: SignInRequest, options?: any): AxiosPromise<void> {
            return localVarFp.signIn(signInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sign up new user
         * @summary create registration
         * @param {SignUpRequest} [signUpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(signUpRequest?: SignUpRequest, options?: any): AxiosPromise<void> {
            return localVarFp.signUp(signUpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update resource\'s share_options
         * @param {string} id Resource id
         * @param {UpdateShareOptionsRequest} updateShareOptionsRequest 
         * @param {string} [spaceKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShareOptions(id: string, updateShareOptionsRequest: UpdateShareOptionsRequest, spaceKey?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateShareOptions(id, updateShareOptionsRequest, spaceKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Start anonym conversion
     * @summary convert_anonym op
     * @param {ConvertAnonymRequest} [convertAnonymRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public convertAnonym(convertAnonymRequest?: ConvertAnonymRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).convertAnonym(convertAnonymRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new Resource through conversion, Resource.current version is not ready
     * @summary convert_create resource
     * @param {ConvertAnonymRequest} convertAnonymRequest 
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public convertCreateResource(convertAnonymRequest: ConvertAnonymRequest, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).convertCreateResource(convertAnonymRequest, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new Version through conversion, Resource.current version is not changed
     * @summary convert_update resource
     * @param {string} id Resource id
     * @param {ConvertAnonymRequest} convertAnonymRequest 
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public convertUpdateResource(id: string, convertAnonymRequest: ConvertAnonymRequest, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).convertUpdateResource(id, convertAnonymRequest, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete resource
     * @param {string} id Resource id
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteResource(id: string, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteResource(id, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get description of Conversion Task
     * @summary show conversion
     * @param {string} id id
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getConversion(id: string, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getConversion(id, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get logs of Conversion Task (redirect to logs file)
     * @summary logs conversion
     * @param {string} id Conversion Task id
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getConversionLogs(id: string, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getConversionLogs(id, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List conversion tasks for user
     * @summary List conversions
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getConversions(spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getConversions(spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary show resource
     * @param {string} id Resource id
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getResource(id: string, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getResource(id, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resource asset items, not only versions
     * @summary get versions
     * @param {string} id Version id
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getResourceAssetItems(id: string, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getResourceAssetItems(id, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resource versions, asset items each of which is versioned representation of resource
     * @summary get versions
     * @param {string} id Resource id
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getResourceVersions(id: string, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getResourceVersions(id, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list resources
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getResources(spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getResources(spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary show resource\'s share_options
     * @param {string} id Resource id
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShareOptions(id: string, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getShareOptions(id, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary show version
     * @param {string} id Version id
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVersion(id: string, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVersion(id, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary files version
     * @param {string} id Version id
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVersionFiles(id: string, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVersionFiles(id, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary enter password for resource share_option
     * @param {string} id Resource id
     * @param {ResourceAuthPasswordRequest} resourceAuthPasswordRequest 
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourceAuthPassword(id: string, resourceAuthPasswordRequest: ResourceAuthPasswordRequest, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resourceAuthPassword(id, resourceAuthPasswordRequest, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change current resource version
     * @summary set_current resource
     * @param {string} id Resource id
     * @param {SetResourceCurrentRequest} setResourceCurrentRequest 
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setResourceCurrent(id: string, setResourceCurrentRequest: SetResourceCurrentRequest, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setResourceCurrent(id, setResourceCurrentRequest, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign in user
     * @summary create session
     * @param {SignInRequest} [signInRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signIn(signInRequest?: SignInRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signIn(signInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign up new user
     * @summary create registration
     * @param {SignUpRequest} [signUpRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signUp(signUpRequest?: SignUpRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signUp(signUpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update resource\'s share_options
     * @param {string} id Resource id
     * @param {UpdateShareOptionsRequest} updateShareOptionsRequest 
     * @param {string} [spaceKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateShareOptions(id: string, updateShareOptionsRequest: UpdateShareOptionsRequest, spaceKey?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateShareOptions(id, updateShareOptionsRequest, spaceKey, options).then((request) => request(this.axios, this.basePath));
    }
}



